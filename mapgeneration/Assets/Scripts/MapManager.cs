// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

using System.IO; 
using System.Text; 

using System.Reflection;
using System.Runtime.Serialization.Formatters.Binary;
using System.Runtime.Serialization; 

public class MapManager:MonoBehaviour	//, ISerializationCallbackReceiver
{
	private CreateSettings uiController;
	private MapData best;
	private bool loadFileIsEmpty;
	private bool isRenderingLoadFile;
	private int[] data;
	int mutationTimes = 3;
	int iterationNumber = 3;

	const string SAVED_MAP_FILE_NAME = "SavedMap.map";

	public MapManager()
	{
	}

	void Start(){

	}
	
	public bool LoadFileIsEmpty(){
		return loadFileIsEmpty;
	}
	
	public bool RenderingLoadFile(){
		return isRenderingLoadFile;
	}

	public int[] GetParamData(){
		return data;
	}

	public void StartMapGenerationProcess() {

		isRenderingLoadFile = false;
		ElementGenerator EG = new ElementGenerator();

		uiController = GetUiController();

		int neutral = uiController.GetInputValues () [0];
		int red = uiController.GetInputValues () [1];
		int blue = uiController.GetInputValues () [2];
		int bases = uiController.GetInputValues () [3];
		int hor = uiController.GetInputValues () [4];
		int ver = uiController.GetInputValues () [5];
		int cover = uiController.GetInputValues () [6]; 
		int symmetric = uiController.GetInputValues () [7];
		bool isSymmetric = symmetric == 1;
		
		data = new int[] {neutral, red, blue, bases, hor, ver, cover, symmetric};

		//CREATE NEW MAP SETTINGS
		MapSettings settings = new MapSettings();
		settings.SetHorDimension(hor);
		settings.SetVerDimension(ver);
		settings.SetNumOfRedFlags(red);
		settings.SetNumOfBlueFlags(blue);
		settings.SetNumOfNeutralFlags(neutral);
		settings.SetNumOfBases(bases); 
		settings.SetSymmetry(isSymmetric); 
		settings.SetDensity (cover);

		//CREATE NEW MAP
		MapData testMap = EG.CreateNewMap(settings);


		//MUTATE THE MAP
		this.best = testMap;

		while(best.GetFitnessFunction() == 0.0) {
			for (int i=0; i<iterationNumber; i++) {
				MapData currMap = EG.CreateNewMap (settings); 
				for (int j=0;j<mutationTimes;j++){
					Debug.Log ("Map Sent for Mutation " + i.ToString());
					testMap = EG.SendMapForMutation (currMap);
					if (best.GetFitnessFunction()<currMap.GetFitnessFunction()){
						this.best = testMap;
					}
				}
			}
		}

		Debug.Log ("Best Fitness: " + best.GetFitnessFunction ().ToString());

		//DISPLAY BEST MAP ON BLUEPRINT
		DrawBestMapToBlueprintView();
	}

	//Call this method to draw 2D blueprint
	void DrawBestMapToBlueprintView() {
		if (isNullMap(best)) {
			return;
		}
		GameObject graphicsGenerator = GameObject.Find ("BlueprintGenerator");
		BlueprintGenerator blueprintGeneratorScript = graphicsGenerator.GetComponent<BlueprintGenerator>();
		blueprintGeneratorScript.DisplayBlueprintMap(best);
	}

	//Call this method to render map to scene
	void RenderBestMapToSceneView() {
		if (isNullMap(best)) {
			return;
		}
		GameObject graphicsGenerator = GameObject.Find ("MapRenderer");
		MapRenderer mapRendererScript = graphicsGenerator.GetComponent<MapRenderer>();
		mapRendererScript.RenderMap(best);
	}

	bool isNullMap(MapData m) {
		return m == null;
	}

	//callback function once a new level is loaded. May be called several times!
	void OnLevelWasLoaded(int level) {
		//Graphics Scene Index is 1. Check in Unity -> File -> Build Settings
		if (level == 1) {
			RenderBestMapToSceneView();
			DrawBestMapToBlueprintView();
		}
		else {
			EnableUiButtons();
			DrawBestMapToBlueprintView();
		}
	}

	void EnableUiButtons() {
		GameObject genButton = GameObject.FindGameObjectWithTag("GenerateButton");
		if (genButton != null) {
			genButton.GetComponent<ActivateButton>().enabled = true;
		}
	}

	//Might want to put this in some UI scripts
	public void onRenderButtonClick() {
		Application.LoadLevelAsync("Graphics View");
	}

	CreateSettings GetUiController() {
		GameObject obj = GameObject.FindWithTag ("GameController");
		if (obj != null) {
			uiController = obj.GetComponent <CreateSettings>();
		}
		if (uiController == null) {
			Debug.Log ("Unable to find 'GameController' script");
		}
		return uiController;
	}

	//The following codes are used to create one serializable map 
	//	For testing on one map and maybe for export function
	//Save MapData into file
	//Pre-cond: Map must have been generated and saved into a var (for now, using "best")
	public void Save () {
		SaveData data = new SaveData (best);
		
		Stream stream = File.Open(SAVED_MAP_FILE_NAME, FileMode.Create);
		BinaryFormatter bformatter = new BinaryFormatter();
		bformatter.Binder = new VersionDeserializationBinder(); 
		Debug.Log ("Saving map to file");
		bformatter.Serialize(stream, data);
		stream.Close();
		Debug.Log ("Map saved to file");
	}
	
	//Load MapData from saved file
	public void Load () {
	//out MapData loadedMap
		SaveData data = new SaveData ();
		GameObject buttonToggle = GameObject.FindWithTag("RenderButton");
		Button button = buttonToggle.GetComponent<Button>();

		if(System.IO.File.Exists(SAVED_MAP_FILE_NAME)){
			Stream stream = File.Open (SAVED_MAP_FILE_NAME, FileMode.Open);
			BinaryFormatter bformatter = new BinaryFormatter();
			bformatter.Binder = new VersionDeserializationBinder(); 
			Debug.Log ("Reading MapData from file");
			data = (SaveData)bformatter.Deserialize(stream);
			stream.Close();
			Debug.Log ("Map loaded from file");

			//Convert back to MapData
			best = data.ConvertToMapData ();
			DrawBestMapToBlueprintView();
			
			button.interactable = true;
			button.image.color = new Color32(4, 163, 242, 150);
			loadFileIsEmpty = false;
			isRenderingLoadFile = true;
		} else {
			button.interactable = false;
			button.image.color = new Color32(193, 193, 193, 255);
			Debug.Log("No such file exists!");
			loadFileIsEmpty = true;
			isRenderingLoadFile = false;
		}
	}


}



